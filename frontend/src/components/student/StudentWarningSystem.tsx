import React, { useState, useEffect } from 'react';
import { mockExtendedStudents, mockTasks, mockEvaluations } from '../../data/mockData';
import { type ExtendedStudent, type Task, type Evaluation } from '../../types/student';
import './StudentWarningSystem.css';

interface StudentWarningSystemProps {
  currentUser?: any;
  students?: ExtendedStudent[];
  tasks?: Task[];
  evaluations?: Evaluation[];
}

interface WarningAlert {
  id: string;
  studentId: string;
  studentName: string;
  type: 'attendance' | 'performance' | 'deadline' | 'behavior' | 'dropout_risk';
  severity: 'low' | 'medium' | 'high' | 'critical';
  title: string;
  description: string;
  autoGenerated: boolean;
  createdAt: string;
  status: 'pending' | 'sent' | 'acknowledged' | 'resolved';
  actions: string[];
}

interface WarningTemplate {
  id: string;
  type: string;
  title: string;
  content: string;
  severity: string;
}

const StudentWarningSystem: React.FC<StudentWarningSystemProps> = ({
  currentUser,
  students = mockExtendedStudents,
  tasks = mockTasks,
  evaluations = mockEvaluations
}) => {
  const [warnings, setWarnings] = useState<WarningAlert[]>([]);
  const [selectedWarning, setSelectedWarning] = useState<WarningAlert | null>(null);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [filterType, setFilterType] = useState<string>('all');
  const [filterSeverity, setFilterSeverity] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  
  // Form states
  const [newWarning, setNewWarning] = useState({
    studentId: '',
    type: 'performance' as WarningAlert['type'],
    severity: 'medium' as WarningAlert['severity'],
    title: '',
    description: '',
    actions: [] as string[]
  });

  const warningTemplates: WarningTemplate[] = [
    {
      id: '1',
      type: 'attendance',
      title: 'Cảnh báo vắng mặt',
      content: 'Bạn đã vắng mặt {count} buổi học gần đây. Vui lòng tham gia đầy đủ các buổi học tiếp theo để không bị ảnh hưởng đến kết quả học tập.',
      severity: 'medium'
    },
    {
      id: '2',
      type: 'performance',
      title: 'Cảnh báo hiệu suất học tập',
      content: 'Điểm số của bạn đang ở mức thấp ({score}/100). Bạn cần cải thiện hiệu suất học tập và tham gia tích cực hơn vào các hoạt động lớp học.',
      severity: 'high'
    },
    {
      id: '3',
      type: 'deadline',
      title: 'Cảnh báo trễ hạn nộp bài',
      content: 'Bạn đã nộp muộn {count} bài tập gần đây. Vui lòng quản lý thời gian tốt hơn và nộp bài đúng hạn.',
      severity: 'medium'
    },
    {
      id: '4',
      type: 'dropout_risk',
      title: 'Cảnh báo nguy cơ bỏ học',
      content: 'Dựa trên phân tích AI, bạn đang có nguy cơ cao bỏ học. Vui lòng liên hệ với giảng viên để được tư vấn và hỗ trợ.',
      severity: 'critical'
    },
    {
      id: '5',
      type: 'behavior',
      title: 'Cảnh báo hành vi',
      content: 'Hành vi của bạn trong lớp học cần được cải thiện. Vui lòng tuân thủ quy định và tôn trọng giảng viên cũng như các bạn học.',
      severity: 'high'
    }
  ];

  useEffect(() => {
    generateAutoWarnings();
  }, [students, tasks, evaluations]);

  const generateAutoWarnings = async () => {
    setIsAnalyzing(true);
    const autoWarnings: WarningAlert[] = [];

    students.forEach(student => {
      const studentTasks = tasks.filter(t => t.assignedTo.includes(student.id));
      const studentEvaluations = evaluations.filter(e => e.evaluatedId === student.id);
      
      // Check attendance (using progress as proxy for attendance)
      const attendanceRate = student.progress || 0;
      if (attendanceRate < 70) {
        autoWarnings.push({
          id: `auto-attendance-${student.id}`,
          studentId: student.id,
          studentName: student.fullName,
          type: 'attendance',
          severity: attendanceRate < 50 ? 'critical' : 'high',
          title: 'Tỷ lệ vắng mặt cao',
          description: `Học viên có tỷ lệ vắng mặt ${100 - attendanceRate}%. Cần can thiệp ngay lập tức.`,
          autoGenerated: true,
          createdAt: new Date().toISOString(),
          status: 'pending',
          actions: ['Liên hệ học viên', 'Gặp phụ huynh', 'Tư vấn học tập']
        });
      }
      
      // Check task completion
      const overdueTasks = studentTasks.filter(t => 
        t.status !== 'completed' && new Date(t.dueDate) < new Date()
      );
      
      if (overdueTasks.length >= 3) {
        autoWarnings.push({
          id: `auto-deadline-${student.id}`,
          studentId: student.id,
          studentName: student.fullName,
          type: 'deadline',
          severity: overdueTasks.length >= 5 ? 'critical' : 'high',
          title: 'Nhiều bài tập quá hạn',
          description: `Học viên có ${overdueTasks.length} bài tập chưa hoàn thành và đã quá hạn.`,
          autoGenerated: true,
          createdAt: new Date().toISOString(),
          status: 'pending',
          actions: ['Gia hạn bài tập', 'Hỗ trợ học tập', 'Điều chỉnh lộ trình']
        });
      }
      
      // Check performance
      if (studentEvaluations.length > 0) {
        const avgScore = studentEvaluations.reduce((sum, evaluation) => sum + evaluation.overallScore, 0) / studentEvaluations.length;
        
        if (avgScore < 50) {
          autoWarnings.push({
            id: `auto-performance-${student.id}`,
            studentId: student.id,
            studentName: student.fullName,
            type: 'performance',
            severity: avgScore < 30 ? 'critical' : 'high',
            title: 'Hiệu suất học tập thấp',
            description: `Điểm trung bình của học viên chỉ đạt ${avgScore.toFixed(1)}/100.`,
            autoGenerated: true,
            createdAt: new Date().toISOString(),
            status: 'pending',
            actions: ['Tư vấn học tập', 'Lớp bổ trợ', 'Thay đổi phương pháp học']
          });
        }
      }
      
      // AI-based dropout risk analysis
      const completionRate = studentTasks.length > 0 
        ? (studentTasks.filter(t => t.status === 'completed').length / studentTasks.length) * 100 
        : 0;
      
      const riskScore = (
        (student.progress || 0) * 0.4 +
        completionRate * 0.3 +
        (studentEvaluations.length > 0
          ? studentEvaluations.reduce((sum, evaluation) => sum + evaluation.overallScore, 0) / studentEvaluations.length
          : 0) * 0.3
      );
      
      if (riskScore < 40) {
        autoWarnings.push({
          id: `auto-dropout-${student.id}`,
          studentId: student.id,
          studentName: student.fullName,
          type: 'dropout_risk',
          severity: 'critical',
          title: 'Nguy cơ bỏ học cao',
          description: `AI phân tích cho thấy học viên có nguy cơ bỏ học cao (điểm rủi ro: ${riskScore.toFixed(1)}/100).`,
          autoGenerated: true,
          createdAt: new Date().toISOString(),
          status: 'pending',
          actions: ['Tư vấn khẩn cấp', 'Gặp phụ huynh', 'Điều chỉnh chương trình', 'Hỗ trợ tài chính']
        });
      }
    });

    setWarnings(autoWarnings);
    setIsAnalyzing(false);
  };

  const getSeverityColor = (severity: WarningAlert['severity']) => {
    switch (severity) {
      case 'low': return '#10b981';
      case 'medium': return '#f59e0b';
      case 'high': return '#f97316';
      case 'critical': return '#ef4444';
      default: return '#6b7280';
    }
  };

  const getSeverityLabel = (severity: WarningAlert['severity']) => {
    switch (severity) {
      case 'low': return 'Thấp';
      case 'medium': return 'Trung bình';
      case 'high': return 'Cao';
      case 'critical': return 'Nghiêm trọng';
      default: return severity;
    }
  };

  const getTypeLabel = (type: WarningAlert['type']) => {
    switch (type) {
      case 'attendance': return 'Vắng mặt';
      case 'performance': return 'Hiệu suất';
      case 'deadline': return 'Trễ hạn';
      case 'behavior': return 'Hành vi';
      case 'dropout_risk': return 'Nguy cơ bỏ học';
      default: return type;
    }
  };

  const getStatusLabel = (status: WarningAlert['status']) => {
    switch (status) {
      case 'pending': return 'Chờ xử lý';
      case 'sent': return 'Đã gửi';
      case 'acknowledged': return 'Đã xác nhận';
      case 'resolved': return 'Đã giải quyết';
      default: return status;
    }
  };

  const handleCreateWarning = () => {
    if (!newWarning.studentId || !newWarning.title || !newWarning.description) return;

    const warning: WarningAlert = {
      id: `manual-${Date.now()}`,
      studentId: newWarning.studentId,
      studentName: students.find(s => s.id === newWarning.studentId)?.fullName || '',
      type: newWarning.type,
      severity: newWarning.severity,
      title: newWarning.title,
      description: newWarning.description,
      autoGenerated: false,
      createdAt: new Date().toISOString(),
      status: 'pending',
      actions: newWarning.actions
    };

    setWarnings([...warnings, warning]);
    setShowCreateModal(false);
    setNewWarning({
      studentId: '',
      type: 'performance',
      severity: 'medium',
      title: '',
      description: '',
      actions: []
    });
  };

  const handleSendWarning = (warningId: string) => {
    setWarnings(warnings.map(w => 
      w.id === warningId ? { ...w, status: 'sent' as const } : w
    ));
    alert('Đã gửi cảnh báo đến học viên!');
  };

  const filteredWarnings = warnings.filter(warning => {
    if (filterType !== 'all' && warning.type !== filterType) return false;
    if (filterSeverity !== 'all' && warning.severity !== filterSeverity) return false;
    if (filterStatus !== 'all' && warning.status !== filterStatus) return false;
    return true;
  });



  return (
    <div className="student-warning-system">
      {/* Header */}
      <div className="warning-header">
        <div className="header-content">
          <h2>⚠️ Hệ thống cảnh báo học viên</h2>
          <p>Theo dõi và quản lý cảnh báo cho học viên</p>
        </div>
        <div className="header-actions">
          <button 
            className="analyze-btn"
            onClick={generateAutoWarnings}
            disabled={isAnalyzing}
          >
            {isAnalyzing ? '🔄 Đang phân tích...' : '🤖 Phân tích tự động'}
          </button>
          <button 
            className="create-btn"
            onClick={() => setShowCreateModal(true)}
          >
            ➕ Tạo cảnh báo
          </button>
        </div>
      </div>

      {/* Filters */}
      <div className="warning-filters">
        <div className="filter-group">
          <label>Loại cảnh báo:</label>
          <select value={filterType} onChange={(e) => setFilterType(e.target.value)}>
            <option value="all">Tất cả</option>
            <option value="attendance">Vắng mặt</option>
            <option value="performance">Hiệu suất</option>
            <option value="deadline">Trễ hạn</option>
            <option value="behavior">Hành vi</option>
            <option value="dropout_risk">Nguy cơ bỏ học</option>
          </select>
        </div>
        
        <div className="filter-group">
          <label>Mức độ:</label>
          <select value={filterSeverity} onChange={(e) => setFilterSeverity(e.target.value)}>
            <option value="all">Tất cả</option>
            <option value="low">Thấp</option>
            <option value="medium">Trung bình</option>
            <option value="high">Cao</option>
            <option value="critical">Nghiêm trọng</option>
          </select>
        </div>
        
        <div className="filter-group">
          <label>Trạng thái:</label>
          <select value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)}>
            <option value="all">Tất cả</option>
            <option value="pending">Chờ xử lý</option>
            <option value="sent">Đã gửi</option>
            <option value="acknowledged">Đã xác nhận</option>
            <option value="resolved">Đã giải quyết</option>
          </select>
        </div>
      </div>

      {/* Statistics */}
      <div className="warning-stats">
        <div className="stat-card critical">
          <div className="stat-number">{warnings.filter(w => w.severity === 'critical').length}</div>
          <div className="stat-label">Nghiêm trọng</div>
        </div>
        <div className="stat-card high">
          <div className="stat-number">{warnings.filter(w => w.severity === 'high').length}</div>
          <div className="stat-label">Mức cao</div>
        </div>
        <div className="stat-card pending">
          <div className="stat-number">{warnings.filter(w => w.status === 'pending').length}</div>
          <div className="stat-label">Chờ xử lý</div>
        </div>
        <div className="stat-card auto">
          <div className="stat-number">{warnings.filter(w => w.autoGenerated).length}</div>
          <div className="stat-label">Tự động</div>
        </div>
      </div>

      {/* Warnings List */}
      <div className="warnings-list">
        {filteredWarnings.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">✅</div>
            <h3>Không có cảnh báo nào</h3>
            <p>Tất cả học viên đang học tập tốt!</p>
          </div>
        ) : (
          filteredWarnings.map(warning => (
            <div key={warning.id} className={`warning-card ${warning.severity}`}>
              <div className="warning-header-card">
                <div className="warning-info">
                  <div className="warning-title">{warning.title}</div>
                  <div className="warning-meta">
                    <span className="student-name">👤 {warning.studentName}</span>
                    <span className="warning-type">{getTypeLabel(warning.type)}</span>
                    <span 
                      className="severity-badge"
                      style={{ backgroundColor: getSeverityColor(warning.severity) }}
                    >
                      {getSeverityLabel(warning.severity)}
                    </span>
                    {warning.autoGenerated && <span className="auto-badge">🤖 Tự động</span>}
                  </div>
                </div>
                <div className="warning-actions">
                  <button 
                    className="action-btn view-btn"
                    onClick={() => {
                      setSelectedWarning(warning);
                      setShowDetailModal(true);
                    }}
                  >
                    👁️ Xem
                  </button>
                  {warning.status === 'pending' && (
                    <button 
                      className="action-btn send-btn"
                      onClick={() => handleSendWarning(warning.id)}
                    >
                      📤 Gửi
                    </button>
                  )}
                </div>
              </div>
              <div className="warning-description">
                {warning.description}
              </div>
              <div className="warning-footer">
                <span className="warning-date">
                  📅 {new Date(warning.createdAt).toLocaleDateString('vi-VN')}
                </span>
                <span 
                  className="status-badge"
                  style={{ 
                    backgroundColor: warning.status === 'pending' ? '#f59e0b' : 
                                   warning.status === 'sent' ? '#3b82f6' : 
                                   warning.status === 'acknowledged' ? '#8b5cf6' : '#10b981'
                  }}
                >
                  {getStatusLabel(warning.status)}
                </span>
              </div>
            </div>
          ))
        )}
      </div>

      {/* Create Warning Modal */}
      {showCreateModal && (
        <div className="modal-overlay">
          <div className="create-warning-modal">
            <div className="modal-header">
              <h3>➕ Tạo cảnh báo mới</h3>
              <button 
                className="close-btn"
                onClick={() => setShowCreateModal(false)}
              >
                ✕
              </button>
            </div>
            
            <div className="modal-content">
              <div className="form-row">
                <div className="form-group">
                  <label>Học viên:</label>
                  <select 
                    value={newWarning.studentId} 
                    onChange={(e) => setNewWarning({...newWarning, studentId: e.target.value})}
                  >
                    <option value="">Chọn học viên</option>
                    {students.map(student => (
                      <option key={student.id} value={student.id}>
                        {student.fullName}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div className="form-group">
                  <label>Loại cảnh báo:</label>
                  <select 
                    value={newWarning.type} 
                    onChange={(e) => setNewWarning({...newWarning, type: e.target.value as any})}
                  >
                    <option value="performance">Hiệu suất</option>
                    <option value="attendance">Vắng mặt</option>
                    <option value="deadline">Trễ hạn</option>
                    <option value="behavior">Hành vi</option>
                    <option value="dropout_risk">Nguy cơ bỏ học</option>
                  </select>
                </div>
                
                <div className="form-group">
                  <label>Mức độ:</label>
                  <select 
                    value={newWarning.severity} 
                    onChange={(e) => setNewWarning({...newWarning, severity: e.target.value as any})}
                  >
                    <option value="low">Thấp</option>
                    <option value="medium">Trung bình</option>
                    <option value="high">Cao</option>
                    <option value="critical">Nghiêm trọng</option>
                  </select>
                </div>
              </div>
              
              <div className="form-group">
                <label>Tiêu đề:</label>
                <input
                  type="text"
                  value={newWarning.title}
                  onChange={(e) => setNewWarning({...newWarning, title: e.target.value})}
                  placeholder="Nhập tiêu đề cảnh báo..."
                />
              </div>
              
              <div className="form-group">
                <label>Nội dung:</label>
                <textarea
                  value={newWarning.description}
                  onChange={(e) => setNewWarning({...newWarning, description: e.target.value})}
                  placeholder="Nhập nội dung cảnh báo..."
                  rows={4}
                />
              </div>
              
              <div className="templates-section">
                <h4>📝 Mẫu cảnh báo có sẵn:</h4>
                <div className="templates-grid">
                  {warningTemplates.map(template => (
                    <button 
                      key={template.id}
                      className="template-card"
                      onClick={() => {
                        setNewWarning({
                          ...newWarning,
                          type: template.type as any,
                          title: template.title,
                          description: template.content,
                          severity: template.severity as any
                        });
                      }}
                    >
                      <div className="template-title">{template.title}</div>
                      <div className="template-type">{getTypeLabel(template.type as any)}</div>
                    </button>
                  ))}
                </div>
              </div>
            </div>
            
            <div className="modal-actions">
              <button 
                className="cancel-btn"
                onClick={() => setShowCreateModal(false)}
              >
                Hủy
              </button>
              <button 
                className="create-btn"
                onClick={handleCreateWarning}
                disabled={!newWarning.studentId || !newWarning.title || !newWarning.description}
              >
                Tạo cảnh báo
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Warning Detail Modal */}
      {showDetailModal && selectedWarning && (
        <div className="modal-overlay">
          <div className="detail-warning-modal">
            <div className="modal-header">
              <h3>📋 Chi tiết cảnh báo</h3>
              <button 
                className="close-btn"
                onClick={() => setShowDetailModal(false)}
              >
                ✕
              </button>
            </div>
            
            <div className="modal-content">
              <div className="detail-section">
                <h4>Thông tin cơ bản</h4>
                <div className="detail-grid">
                  <div className="detail-item">
                    <label>Học viên:</label>
                    <span>{selectedWarning.studentName}</span>
                  </div>
                  <div className="detail-item">
                    <label>Loại:</label>
                    <span>{getTypeLabel(selectedWarning.type)}</span>
                  </div>
                  <div className="detail-item">
                    <label>Mức độ:</label>
                    <span 
                      className="severity-badge"
                      style={{ backgroundColor: getSeverityColor(selectedWarning.severity) }}
                    >
                      {getSeverityLabel(selectedWarning.severity)}
                    </span>
                  </div>
                  <div className="detail-item">
                    <label>Trạng thái:</label>
                    <span>{getStatusLabel(selectedWarning.status)}</span>
                  </div>
                </div>
              </div>
              
              <div className="detail-section">
                <h4>Nội dung</h4>
                <div className="warning-content">
                  <h5>{selectedWarning.title}</h5>
                  <p>{selectedWarning.description}</p>
                </div>
              </div>
              
              {selectedWarning.actions.length > 0 && (
                <div className="detail-section">
                  <h4>Hành động đề xuất</h4>
                  <ul className="actions-list">
                    {selectedWarning.actions.map((action, index) => (
                      <li key={index}>✓ {action}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
            
            <div className="modal-actions">
              <button 
                className="close-btn"
                onClick={() => setShowDetailModal(false)}
              >
                Đóng
              </button>
              {selectedWarning.status === 'pending' && (
                <button 
                  className="send-btn"
                  onClick={() => {
                    handleSendWarning(selectedWarning.id);
                    setShowDetailModal(false);
                  }}
                >
                  📤 Gửi cảnh báo
                </button>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default StudentWarningSystem;